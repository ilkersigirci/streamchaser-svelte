
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as append_styles, m as create_slot, b as validate_slots, e as element, g as attr_dev, h as add_location, j as insert_dev, q as update_slot_base, r as get_all_dirty_from_scope, w as get_slot_changes, y as transition_in, z as transition_out, l as detach_dev, _ as createEventDispatcher, a5 as onMount, f as space, L as listen_dev, N as run_all, W as validate_each_argument, Z as destroy_each, an as null_to_empty, k as append_dev, Q as group_outros, R as check_outros, P as binding_callbacks, v as validate_store, T as currentCountry, c as component_subscribe, U as goto, u as url, A as create_component, B as mount_component, C as destroy_component, E as src_url_equal, D as set_style, x as is_function, ad as empty, n as noop } from './main.js';
import { I as Icon, a as mdiArrowRightBoldCircle, b as mdiArrowLeftBoldCircle } from './Header.js';

/* node_modules/svelte-materialify/dist/components/Card/CardText.svelte generated by Svelte v3.42.1 */

const file$3 = "node_modules/svelte-materialify/dist/components/Card/CardText.svelte";

function add_css$3(target) {
	append_styles(target, "svelte-p2yknz", ".s-card-text{width:100%;color:var(--theme-text-secondary);font-size:.875rem;font-weight:400;line-height:1.375rem;letter-spacing:.0071428571em;padding:16px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZFRleHQuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQU0rQyxZQUFBLEFBQUEsQ0FBQSw4SUFBcUsiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQ2FyZFRleHQuc3ZlbHRlIl19 */");
}

function create_fragment$3(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", div_class_value = "s-card-text " + /*klass*/ ctx[0]);
			attr_dev(div, "style", /*style*/ ctx[1]);
			add_location(div, file$3, 15, 0, 347);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card-text " + /*klass*/ ctx[0])) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*style*/ 2) {
				attr_dev(div, "style", /*style*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CardText', slots, ['default']);
	let { class: klass = '' } = $$props;
	let { style = null } = $$props;
	const writable_props = ['class', 'style'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardText> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
		if ('style' in $$props) $$invalidate(1, style = $$props.style);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ klass, style });

	$$self.$inject_state = $$props => {
		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
		if ('style' in $$props) $$invalidate(1, style = $$props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [klass, style, $$scope, slots];
}

class CardText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 0, style: 1 }, add_css$3);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardText",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<CardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<CardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-materialify/dist/components/Card/CardTitle.svelte generated by Svelte v3.42.1 */

const file$2 = "node_modules/svelte-materialify/dist/components/Card/CardTitle.svelte";

function add_css$2(target) {
	append_styles(target, "svelte-1jwd5yf", ".s-card-title{align-items:center;display:flex;flex-wrap:wrap;font-size:1.25rem;font-weight:500;letter-spacing:.0125em;line-height:2rem;word-break:break-all;padding:16px}.s-card-title+.s-card-subtitle,.s-card-title+.s-card-title{padding-top:0;margin-top:-16px}.s-card-title+.s-card-subtitle{margin-top:-16px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZFRpdGxlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUFNZ0QsYUFBQSxBQUFBLENBQUEscVNBQW1YIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkNhcmRUaXRsZS5zdmVsdGUiXX0= */");
}

function create_fragment$2(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", div_class_value = "s-card-title " + /*klass*/ ctx[0]);
			attr_dev(div, "style", /*style*/ ctx[1]);
			add_location(div, file$2, 24, 0, 591);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card-title " + /*klass*/ ctx[0])) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*style*/ 2) {
				attr_dev(div, "style", /*style*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CardTitle', slots, ['default']);
	let { class: klass = '' } = $$props;
	let { style = null } = $$props;
	const writable_props = ['class', 'style'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardTitle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
		if ('style' in $$props) $$invalidate(1, style = $$props.style);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ klass, style });

	$$self.$inject_state = $$props => {
		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
		if ('style' in $$props) $$invalidate(1, style = $$props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [klass, style, $$scope, slots];
}

class CardTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 0, style: 1 }, add_css$2);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardTitle",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<CardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<CardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var siema_min = {exports: {}};

(function (module, exports) {
!function(e,t){module.exports=t();}("undefined"!=typeof self?self:commonjsGlobal,function(){return function(e){function t(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var i={};return t.m=e,t.c=i,t.d=function(e,i,r){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:r});},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,i){function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),l=function(){function e(t){var i=this;if(r(this,e),this.config=e.mergeSettings(t),this.selector="string"==typeof this.config.selector?document.querySelector(this.config.selector):this.config.selector,null===this.selector)throw new Error("Something wrong with your selector 😭");this.resolveSlidesNumber(),this.selectorWidth=this.selector.offsetWidth,this.innerElements=[].slice.call(this.selector.children),this.currentSlide=this.config.loop?this.config.startIndex%this.innerElements.length:Math.max(0,Math.min(this.config.startIndex,this.innerElements.length-this.perPage)),this.transformProperty=e.webkitOrNot(),["resizeHandler","touchstartHandler","touchendHandler","touchmoveHandler","mousedownHandler","mouseupHandler","mouseleaveHandler","mousemoveHandler","clickHandler"].forEach(function(e){i[e]=i[e].bind(i);}),this.init();}return s(e,[{key:"attachEvents",value:function(){window.addEventListener("resize",this.resizeHandler),this.config.draggable&&(this.pointerDown=!1,this.drag={startX:0,endX:0,startY:0,letItGo:null,preventClick:!1},this.selector.addEventListener("touchstart",this.touchstartHandler),this.selector.addEventListener("touchend",this.touchendHandler),this.selector.addEventListener("touchmove",this.touchmoveHandler),this.selector.addEventListener("mousedown",this.mousedownHandler),this.selector.addEventListener("mouseup",this.mouseupHandler),this.selector.addEventListener("mouseleave",this.mouseleaveHandler),this.selector.addEventListener("mousemove",this.mousemoveHandler),this.selector.addEventListener("click",this.clickHandler));}},{key:"detachEvents",value:function(){window.removeEventListener("resize",this.resizeHandler),this.selector.removeEventListener("touchstart",this.touchstartHandler),this.selector.removeEventListener("touchend",this.touchendHandler),this.selector.removeEventListener("touchmove",this.touchmoveHandler),this.selector.removeEventListener("mousedown",this.mousedownHandler),this.selector.removeEventListener("mouseup",this.mouseupHandler),this.selector.removeEventListener("mouseleave",this.mouseleaveHandler),this.selector.removeEventListener("mousemove",this.mousemoveHandler),this.selector.removeEventListener("click",this.clickHandler);}},{key:"init",value:function(){this.attachEvents(),this.selector.style.overflow="hidden",this.selector.style.direction=this.config.rtl?"rtl":"ltr",this.buildSliderFrame(),this.config.onInit.call(this);}},{key:"buildSliderFrame",value:function(){var e=this.selectorWidth/this.perPage,t=this.config.loop?this.innerElements.length+2*this.perPage:this.innerElements.length;this.sliderFrame=document.createElement("div"),this.sliderFrame.style.width=e*t+"px",this.enableTransition(),this.config.draggable&&(this.selector.style.cursor="-webkit-grab");var i=document.createDocumentFragment();if(this.config.loop)for(var r=this.innerElements.length-this.perPage;r<this.innerElements.length;r++){var n=this.buildSliderFrameItem(this.innerElements[r].cloneNode(!0));i.appendChild(n);}for(var s=0;s<this.innerElements.length;s++){var l=this.buildSliderFrameItem(this.innerElements[s]);i.appendChild(l);}if(this.config.loop)for(var o=0;o<this.perPage;o++){var a=this.buildSliderFrameItem(this.innerElements[o].cloneNode(!0));i.appendChild(a);}this.sliderFrame.appendChild(i),this.selector.innerHTML="",this.selector.appendChild(this.sliderFrame),this.slideToCurrent();}},{key:"buildSliderFrameItem",value:function(e){var t=document.createElement("div");return t.style.cssFloat=this.config.rtl?"right":"left",t.style.float=this.config.rtl?"right":"left",t.style.width=(this.config.loop?100/(this.innerElements.length+2*this.perPage):100/this.innerElements.length)+"%",t.appendChild(e),t}},{key:"resolveSlidesNumber",value:function(){if("number"==typeof this.config.perPage)this.perPage=this.config.perPage;else if("object"===n(this.config.perPage)){this.perPage=1;for(var e in this.config.perPage)window.innerWidth>=e&&(this.perPage=this.config.perPage[e]);}}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments[1];if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;if(this.config.loop){if(this.currentSlide-e<0){this.disableTransition();var r=this.currentSlide+this.innerElements.length,n=this.perPage,s=r+n,l=(this.config.rtl?1:-1)*s*(this.selectorWidth/this.perPage),o=this.config.draggable?this.drag.endX-this.drag.startX:0;this.sliderFrame.style[this.transformProperty]="translate3d("+(l+o)+"px, 0, 0)",this.currentSlide=r-e;}else this.currentSlide=this.currentSlide-e;}else this.currentSlide=Math.max(this.currentSlide-e,0);i!==this.currentSlide&&(this.slideToCurrent(this.config.loop),this.config.onChange.call(this),t&&t.call(this));}}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments[1];if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;if(this.config.loop){if(this.currentSlide+e>this.innerElements.length-this.perPage){this.disableTransition();var r=this.currentSlide-this.innerElements.length,n=this.perPage,s=r+n,l=(this.config.rtl?1:-1)*s*(this.selectorWidth/this.perPage),o=this.config.draggable?this.drag.endX-this.drag.startX:0;this.sliderFrame.style[this.transformProperty]="translate3d("+(l+o)+"px, 0, 0)",this.currentSlide=r+e;}else this.currentSlide=this.currentSlide+e;}else this.currentSlide=Math.min(this.currentSlide+e,this.innerElements.length-this.perPage);i!==this.currentSlide&&(this.slideToCurrent(this.config.loop),this.config.onChange.call(this),t&&t.call(this));}}},{key:"disableTransition",value:function(){this.sliderFrame.style.webkitTransition="all 0ms "+this.config.easing,this.sliderFrame.style.transition="all 0ms "+this.config.easing;}},{key:"enableTransition",value:function(){this.sliderFrame.style.webkitTransition="all "+this.config.duration+"ms "+this.config.easing,this.sliderFrame.style.transition="all "+this.config.duration+"ms "+this.config.easing;}},{key:"goTo",value:function(e,t){if(!(this.innerElements.length<=this.perPage)){var i=this.currentSlide;this.currentSlide=this.config.loop?e%this.innerElements.length:Math.min(Math.max(e,0),this.innerElements.length-this.perPage),i!==this.currentSlide&&(this.slideToCurrent(),this.config.onChange.call(this),t&&t.call(this));}}},{key:"slideToCurrent",value:function(e){var t=this,i=this.config.loop?this.currentSlide+this.perPage:this.currentSlide,r=(this.config.rtl?1:-1)*i*(this.selectorWidth/this.perPage);e?requestAnimationFrame(function(){requestAnimationFrame(function(){t.enableTransition(),t.sliderFrame.style[t.transformProperty]="translate3d("+r+"px, 0, 0)";});}):this.sliderFrame.style[this.transformProperty]="translate3d("+r+"px, 0, 0)";}},{key:"updateAfterDrag",value:function(){var e=(this.config.rtl?-1:1)*(this.drag.endX-this.drag.startX),t=Math.abs(e),i=this.config.multipleDrag?Math.ceil(t/(this.selectorWidth/this.perPage)):1,r=e>0&&this.currentSlide-i<0,n=e<0&&this.currentSlide+i>this.innerElements.length-this.perPage;e>0&&t>this.config.threshold&&this.innerElements.length>this.perPage?this.prev(i):e<0&&t>this.config.threshold&&this.innerElements.length>this.perPage&&this.next(i),this.slideToCurrent(r||n);}},{key:"resizeHandler",value:function(){this.resolveSlidesNumber(),this.currentSlide+this.perPage>this.innerElements.length&&(this.currentSlide=this.innerElements.length<=this.perPage?0:this.innerElements.length-this.perPage),this.selectorWidth=this.selector.offsetWidth,this.buildSliderFrame();}},{key:"clearDrag",value:function(){this.drag={startX:0,endX:0,startY:0,letItGo:null,preventClick:this.drag.preventClick};}},{key:"touchstartHandler",value:function(e){-1!==["TEXTAREA","OPTION","INPUT","SELECT"].indexOf(e.target.nodeName)||(e.stopPropagation(),this.pointerDown=!0,this.drag.startX=e.touches[0].pageX,this.drag.startY=e.touches[0].pageY);}},{key:"touchendHandler",value:function(e){e.stopPropagation(),this.pointerDown=!1,this.enableTransition(),this.drag.endX&&this.updateAfterDrag(),this.clearDrag();}},{key:"touchmoveHandler",value:function(e){if(e.stopPropagation(),null===this.drag.letItGo&&(this.drag.letItGo=Math.abs(this.drag.startY-e.touches[0].pageY)<Math.abs(this.drag.startX-e.touches[0].pageX)),this.pointerDown&&this.drag.letItGo){e.preventDefault(),this.drag.endX=e.touches[0].pageX,this.sliderFrame.style.webkitTransition="all 0ms "+this.config.easing,this.sliderFrame.style.transition="all 0ms "+this.config.easing;var t=this.config.loop?this.currentSlide+this.perPage:this.currentSlide,i=t*(this.selectorWidth/this.perPage),r=this.drag.endX-this.drag.startX,n=this.config.rtl?i+r:i-r;this.sliderFrame.style[this.transformProperty]="translate3d("+(this.config.rtl?1:-1)*n+"px, 0, 0)";}}},{key:"mousedownHandler",value:function(e){-1!==["TEXTAREA","OPTION","INPUT","SELECT"].indexOf(e.target.nodeName)||(e.preventDefault(),e.stopPropagation(),this.pointerDown=!0,this.drag.startX=e.pageX);}},{key:"mouseupHandler",value:function(e){e.stopPropagation(),this.pointerDown=!1,this.selector.style.cursor="-webkit-grab",this.enableTransition(),this.drag.endX&&this.updateAfterDrag(),this.clearDrag();}},{key:"mousemoveHandler",value:function(e){if(e.preventDefault(),this.pointerDown){"A"===e.target.nodeName&&(this.drag.preventClick=!0),this.drag.endX=e.pageX,this.selector.style.cursor="-webkit-grabbing",this.sliderFrame.style.webkitTransition="all 0ms "+this.config.easing,this.sliderFrame.style.transition="all 0ms "+this.config.easing;var t=this.config.loop?this.currentSlide+this.perPage:this.currentSlide,i=t*(this.selectorWidth/this.perPage),r=this.drag.endX-this.drag.startX,n=this.config.rtl?i+r:i-r;this.sliderFrame.style[this.transformProperty]="translate3d("+(this.config.rtl?1:-1)*n+"px, 0, 0)";}}},{key:"mouseleaveHandler",value:function(e){this.pointerDown&&(this.pointerDown=!1,this.selector.style.cursor="-webkit-grab",this.drag.endX=e.pageX,this.drag.preventClick=!1,this.enableTransition(),this.updateAfterDrag(),this.clearDrag());}},{key:"clickHandler",value:function(e){this.drag.preventClick&&e.preventDefault(),this.drag.preventClick=!1;}},{key:"remove",value:function(e,t){if(e<0||e>=this.innerElements.length)throw new Error("Item to remove doesn't exist 😭");var i=e<this.currentSlide,r=this.currentSlide+this.perPage-1===e;(i||r)&&this.currentSlide--,this.innerElements.splice(e,1),this.buildSliderFrame(),t&&t.call(this);}},{key:"insert",value:function(e,t,i){if(t<0||t>this.innerElements.length+1)throw new Error("Unable to inset it at this index 😭");if(-1!==this.innerElements.indexOf(e))throw new Error("The same item in a carousel? Really? Nope 😭");var r=t<=this.currentSlide>0&&this.innerElements.length;this.currentSlide=r?this.currentSlide+1:this.currentSlide,this.innerElements.splice(t,0,e),this.buildSliderFrame(),i&&i.call(this);}},{key:"prepend",value:function(e,t){this.insert(e,0),t&&t.call(this);}},{key:"append",value:function(e,t){this.insert(e,this.innerElements.length+1),t&&t.call(this);}},{key:"destroy",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments[1];if(this.detachEvents(),this.selector.style.cursor="auto",e){for(var i=document.createDocumentFragment(),r=0;r<this.innerElements.length;r++)i.appendChild(this.innerElements[r]);this.selector.innerHTML="",this.selector.appendChild(i),this.selector.removeAttribute("style");}t&&t.call(this);}}],[{key:"mergeSettings",value:function(e){var t={selector:".siema",duration:200,easing:"ease-out",perPage:1,startIndex:0,draggable:!0,multipleDrag:!0,threshold:20,loop:!1,rtl:!1,onInit:function(){},onChange:function(){}},i=e;for(var r in i)t[r]=i[r];return t}},{key:"webkitOrNot",value:function(){return "string"==typeof document.documentElement.style.transform?"transform":"WebkitTransform"}}]),e}();t.default=l,e.exports=t.default;}])});
}(siema_min));

var Siema = /*@__PURE__*/getDefaultExportFromCjs(siema_min.exports);

/* node_modules/@beyonk/svelte-carousel/src/Carousel.svelte generated by Svelte v3.42.1 */
const file$1 = "node_modules/@beyonk/svelte-carousel/src/Carousel.svelte";

function add_css$1(target) {
	append_styles(target, "svelte-ha1mle", ".carousel.svelte-ha1mle.svelte-ha1mle{position:relative;width:100%;justify-content:center;align-items:center}button.svelte-ha1mle.svelte-ha1mle{position:absolute;width:40px;height:40px;top:50%;z-index:50;margin-top:-20px;border:none;background-color:transparent}button.svelte-ha1mle.svelte-ha1mle:focus{outline:none}.left.svelte-ha1mle.svelte-ha1mle{left:2vw}.right.svelte-ha1mle.svelte-ha1mle{right:2vw}ul.svelte-ha1mle.svelte-ha1mle{list-style-type:none;position:absolute;display:flex;justify-content:center;width:100%;margin-top:-30px;padding:0}ul.svelte-ha1mle li.svelte-ha1mle{margin:6px;border-radius:100%;background-color:rgba(255,255,255,0.5);height:8px;width:8px}ul.svelte-ha1mle li.svelte-ha1mle:hover{background-color:rgba(255,255,255,0.85)}ul.svelte-ha1mle li.active.svelte-ha1mle{background-color:rgba(255,255,255,1)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2Fyb3VzZWwuc3ZlbHRlIiwibWFwcGluZ3MiOiI4ekJBOEVBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkNhcm91c2VsLnN2ZWx0ZSJdfQ== */");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	child_ctx[33] = i;
	return child_ctx;
}

const get_right_control_slot_changes = dirty => ({});
const get_right_control_slot_context = ctx => ({});
const get_left_control_slot_changes = dirty => ({});
const get_left_control_slot_context = ctx => ({});

// (6:1) {#if controls}
function create_if_block_1(ctx) {
	let button0;
	let t;
	let button1;
	let current;
	let mounted;
	let dispose;
	const left_control_slot_template = /*#slots*/ ctx[24]["left-control"];
	const left_control_slot = create_slot(left_control_slot_template, ctx, /*$$scope*/ ctx[23], get_left_control_slot_context);
	const right_control_slot_template = /*#slots*/ ctx[24]["right-control"];
	const right_control_slot = create_slot(right_control_slot_template, ctx, /*$$scope*/ ctx[23], get_right_control_slot_context);

	const block = {
		c: function create() {
			button0 = element("button");
			if (left_control_slot) left_control_slot.c();
			t = space();
			button1 = element("button");
			if (right_control_slot) right_control_slot.c();
			attr_dev(button0, "class", "left svelte-ha1mle");
			attr_dev(button0, "aria-label", "left");
			add_location(button0, file$1, 6, 1, 105);
			attr_dev(button1, "class", "right svelte-ha1mle");
			attr_dev(button1, "aria-label", "right");
			add_location(button1, file$1, 9, 1, 209);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button0, anchor);

			if (left_control_slot) {
				left_control_slot.m(button0, null);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, button1, anchor);

			if (right_control_slot) {
				right_control_slot.m(button1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*left*/ ctx[3], false, false, false),
					listen_dev(button1, "click", /*right*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (left_control_slot) {
				if (left_control_slot.p && (!current || dirty[0] & /*$$scope*/ 8388608)) {
					update_slot_base(
						left_control_slot,
						left_control_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(left_control_slot_template, /*$$scope*/ ctx[23], dirty, get_left_control_slot_changes),
						get_left_control_slot_context
					);
				}
			}

			if (right_control_slot) {
				if (right_control_slot.p && (!current || dirty[0] & /*$$scope*/ 8388608)) {
					update_slot_base(
						right_control_slot,
						right_control_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(right_control_slot_template, /*$$scope*/ ctx[23], dirty, get_right_control_slot_changes),
						get_right_control_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(left_control_slot, local);
			transition_in(right_control_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(left_control_slot, local);
			transition_out(right_control_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button0);
			if (left_control_slot) left_control_slot.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(button1);
			if (right_control_slot) right_control_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(6:1) {#if controls}",
		ctx
	});

	return block;
}

// (14:4) {#if dots}
function create_if_block(ctx) {
	let ul;
	let each_value = { length: /*totalDots*/ ctx[9] };
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(ul, "class", "svelte-ha1mle");
			add_location(ul, file$1, 14, 1, 339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*isDotActive, currentIndex, go, currentPerPage, totalDots*/ 740) {
				each_value = { length: /*totalDots*/ ctx[9] };
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(14:4) {#if dots}",
		ctx
	});

	return block;
}

// (16:2) {#each {length: totalDots} as _, i}
function create_each_block$1(ctx) {
	let li;
	let li_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[26](/*i*/ ctx[33]);
	}

	const block = {
		c: function create() {
			li = element("li");

			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*isDotActive*/ ctx[2](/*currentIndex*/ ctx[7], /*i*/ ctx[33])
			? "active"
			: "") + " svelte-ha1mle"));

			add_location(li, file$1, 16, 2, 384);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*currentIndex*/ 128 && li_class_value !== (li_class_value = "" + (null_to_empty(/*isDotActive*/ ctx[2](/*currentIndex*/ ctx[7], /*i*/ ctx[33])
			? "active"
			: "") + " svelte-ha1mle"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(16:2) {#each {length: totalDots} as _, i}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let current;
	const default_slot_template = /*#slots*/ ctx[24].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);
	let if_block0 = /*controls*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = /*dots*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr_dev(div0, "class", "slides");
			add_location(div0, file$1, 2, 1, 25);
			attr_dev(div1, "class", "carousel svelte-ha1mle");
			add_location(div1, file$1, 1, 0, 1);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[25](div0);
			append_dev(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 8388608)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, null),
						null
					);
				}
			}

			if (/*controls*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*controls*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*dots*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[25](null);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let pips;
	let currentPerPage;
	let totalDots;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Carousel', slots, ['default','left-control','right-control']);
	let { perPage = 3 } = $$props;
	let { loop = true } = $$props;
	let { autoplay = 0 } = $$props;
	let { duration = 200 } = $$props;
	let { easing = 'ease-out' } = $$props;
	let { startIndex = 0 } = $$props;
	let { draggable = true } = $$props;
	let { multipleDrag = true } = $$props;
	let { dots = true } = $$props;
	let { controls = true } = $$props;
	let { threshold = 20 } = $$props;
	let { rtl = false } = $$props;
	let currentIndex = startIndex;
	let siema;
	let controller;
	let timer;
	const dispatch = createEventDispatcher();

	onMount(() => {
		$$invalidate(22, controller = new Siema({
				selector: siema,
				perPage: typeof perPage === 'object' ? perPage : Number(perPage),
				loop,
				duration,
				easing,
				startIndex,
				draggable,
				multipleDrag,
				threshold,
				rtl,
				onChange: handleChange
			}));

		if (autoplay) {
			timer = setInterval(right, autoplay);
		}

		return () => {
			autoplay && clearInterval(timer);
			controller.destroy();
		};
	});

	function isDotActive(currentIndex, dotIndex) {
		if (currentIndex < 0) currentIndex = pips.length + currentIndex;
		return currentIndex >= dotIndex * currentPerPage && currentIndex < dotIndex * currentPerPage + currentPerPage;
	}

	function left() {
		controller.prev();
	}

	function right() {
		controller.next();
	}

	function go(index) {
		controller.goTo(index);
	}

	function pause() {
		clearInterval(timer);
	}

	function resume() {
		if (autoplay) {
			timer = setInterval(right, autoplay);
		}
	}

	function handleChange(event) {
		$$invalidate(7, currentIndex = controller.currentSlide);

		dispatch('change', {
			currentSlide: controller.currentSlide,
			slideCount: controller.innerElements.length
		});
	}

	const writable_props = [
		'perPage',
		'loop',
		'autoplay',
		'duration',
		'easing',
		'startIndex',
		'draggable',
		'multipleDrag',
		'dots',
		'controls',
		'threshold',
		'rtl'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Carousel> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			siema = $$value;
			$$invalidate(8, siema);
		});
	}

	const click_handler = i => go(i * currentPerPage);

	$$self.$$set = $$props => {
		if ('perPage' in $$props) $$invalidate(10, perPage = $$props.perPage);
		if ('loop' in $$props) $$invalidate(11, loop = $$props.loop);
		if ('autoplay' in $$props) $$invalidate(12, autoplay = $$props.autoplay);
		if ('duration' in $$props) $$invalidate(13, duration = $$props.duration);
		if ('easing' in $$props) $$invalidate(14, easing = $$props.easing);
		if ('startIndex' in $$props) $$invalidate(15, startIndex = $$props.startIndex);
		if ('draggable' in $$props) $$invalidate(16, draggable = $$props.draggable);
		if ('multipleDrag' in $$props) $$invalidate(17, multipleDrag = $$props.multipleDrag);
		if ('dots' in $$props) $$invalidate(0, dots = $$props.dots);
		if ('controls' in $$props) $$invalidate(1, controls = $$props.controls);
		if ('threshold' in $$props) $$invalidate(18, threshold = $$props.threshold);
		if ('rtl' in $$props) $$invalidate(19, rtl = $$props.rtl);
		if ('$$scope' in $$props) $$invalidate(23, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Siema,
		onMount,
		createEventDispatcher,
		perPage,
		loop,
		autoplay,
		duration,
		easing,
		startIndex,
		draggable,
		multipleDrag,
		dots,
		controls,
		threshold,
		rtl,
		currentIndex,
		siema,
		controller,
		timer,
		dispatch,
		isDotActive,
		left,
		right,
		go,
		pause,
		resume,
		handleChange,
		currentPerPage,
		pips,
		totalDots
	});

	$$self.$inject_state = $$props => {
		if ('perPage' in $$props) $$invalidate(10, perPage = $$props.perPage);
		if ('loop' in $$props) $$invalidate(11, loop = $$props.loop);
		if ('autoplay' in $$props) $$invalidate(12, autoplay = $$props.autoplay);
		if ('duration' in $$props) $$invalidate(13, duration = $$props.duration);
		if ('easing' in $$props) $$invalidate(14, easing = $$props.easing);
		if ('startIndex' in $$props) $$invalidate(15, startIndex = $$props.startIndex);
		if ('draggable' in $$props) $$invalidate(16, draggable = $$props.draggable);
		if ('multipleDrag' in $$props) $$invalidate(17, multipleDrag = $$props.multipleDrag);
		if ('dots' in $$props) $$invalidate(0, dots = $$props.dots);
		if ('controls' in $$props) $$invalidate(1, controls = $$props.controls);
		if ('threshold' in $$props) $$invalidate(18, threshold = $$props.threshold);
		if ('rtl' in $$props) $$invalidate(19, rtl = $$props.rtl);
		if ('currentIndex' in $$props) $$invalidate(7, currentIndex = $$props.currentIndex);
		if ('siema' in $$props) $$invalidate(8, siema = $$props.siema);
		if ('controller' in $$props) $$invalidate(22, controller = $$props.controller);
		if ('timer' in $$props) timer = $$props.timer;
		if ('currentPerPage' in $$props) $$invalidate(6, currentPerPage = $$props.currentPerPage);
		if ('pips' in $$props) pips = $$props.pips;
		if ('totalDots' in $$props) $$invalidate(9, totalDots = $$props.totalDots);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*controller*/ 4194304) {
			pips = controller ? controller.innerElements : [];
		}

		if ($$self.$$.dirty[0] & /*controller, perPage*/ 4195328) {
			$$invalidate(6, currentPerPage = controller ? controller.perPage : perPage);
		}

		if ($$self.$$.dirty[0] & /*controller, currentPerPage*/ 4194368) {
			$$invalidate(9, totalDots = controller
			? Math.ceil(controller.innerElements.length / currentPerPage)
			: []);
		}
	};

	return [
		dots,
		controls,
		isDotActive,
		left,
		right,
		go,
		currentPerPage,
		currentIndex,
		siema,
		totalDots,
		perPage,
		loop,
		autoplay,
		duration,
		easing,
		startIndex,
		draggable,
		multipleDrag,
		threshold,
		rtl,
		pause,
		resume,
		controller,
		$$scope,
		slots,
		div0_binding,
		click_handler
	];
}

class Carousel extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				perPage: 10,
				loop: 11,
				autoplay: 12,
				duration: 13,
				easing: 14,
				startIndex: 15,
				draggable: 16,
				multipleDrag: 17,
				dots: 0,
				controls: 1,
				threshold: 18,
				rtl: 19,
				isDotActive: 2,
				left: 3,
				right: 4,
				go: 5,
				pause: 20,
				resume: 21
			},
			add_css$1,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel",
			options,
			id: create_fragment$1.name
		});
	}

	get perPage() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set perPage(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loop() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loop(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get autoplay() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set autoplay(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get duration() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set duration(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get easing() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set easing(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get startIndex() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set startIndex(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get draggable() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set draggable(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multipleDrag() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multipleDrag(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dots() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dots(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get controls() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set controls(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get threshold() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set threshold(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rtl() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rtl(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isDotActive() {
		return this.$$.ctx[2];
	}

	set isDotActive(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get left() {
		return this.$$.ctx[3];
	}

	set left(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get right() {
		return this.$$.ctx[4];
	}

	set right(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get go() {
		return this.$$.ctx[5];
	}

	set go(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pause() {
		return this.$$.ctx[20];
	}

	set pause(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get resume() {
		return this.$$.ctx[21];
	}

	set resume(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Carousel.svelte generated by Svelte v3.42.1 */
const file = "src/components/Carousel.svelte";

function add_css(target) {
	append_styles(target, "svelte-1t95u89", ".carousel-content.svelte-1t95u89{display:flex;height:34vh;z-index:1;border:3px solid #fff}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2Fyb3VzZWwuc3ZlbHRlIiwibWFwcGluZ3MiOiIwRkE4REEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQ2Fyb3VzZWwuc3ZlbHRlIl19 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (38:8) {#each recommendations as recommendation}
function create_each_block(ctx) {
	let div;
	let img;
	let img_src_value;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t = space();
			if (!src_url_equal(img.src, img_src_value = "" + (API_URL + /*recommendation*/ ctx[7].poster_path))) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "recommended content");
			set_style(img, "border-radius", "5% 2% 5% 2%");
			set_style(img, "box-shadow", "0 0 3px black");
			add_location(img, file, 39, 16, 1145);
			attr_dev(div, "class", "carousel-content svelte-1t95u89");
			add_location(div, file, 38, 12, 1097);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t);

			if (!mounted) {
				dispose = [
					listen_dev(img, "mousedown", /*mouseDownTracker*/ ctx[1], false, false, false),
					listen_dev(
						img,
						"mouseup",
						function () {
							if (is_function(/*mouseUpDragOrRedirecter*/ ctx[2](event, /*recommendation*/ ctx[7].id))) /*mouseUpDragOrRedirecter*/ ctx[2](event, /*recommendation*/ ctx[7].id).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*recommendations*/ 1 && !src_url_equal(img.src, img_src_value = "" + (API_URL + /*recommendation*/ ctx[7].poster_path))) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(38:8) {#each recommendations as recommendation}",
		ctx
	});

	return block;
}

// (34:4) <Carousel perPage={4} dots={false}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let each_value = /*recommendations*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*API_URL, recommendations, mouseDownTracker, mouseUpDragOrRedirecter, event*/ 7) {
				each_value = /*recommendations*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(34:4) <Carousel perPage={4} dots={false}>",
		ctx
	});

	return block;
}

// (35:8) 
function create_left_control_slot(ctx) {
	let span;
	let icon;
	let current;

	icon = new Icon({
			props: { path: mdiArrowLeftBoldCircle, size: 50 },
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			attr_dev(span, "class", "control");
			attr_dev(span, "slot", "left-control");
			add_location(span, file, 34, 8, 912);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_left_control_slot.name,
		type: "slot",
		source: "(35:8) ",
		ctx
	});

	return block;
}

// (47:8) 
function create_right_control_slot(ctx) {
	let span;
	let icon;
	let current;

	icon = new Icon({
			props: { path: mdiArrowRightBoldCircle, size: 50 },
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			attr_dev(span, "class", "control");
			attr_dev(span, "slot", "right-control");
			add_location(span, file, 46, 8, 1512);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_right_control_slot.name,
		type: "slot",
		source: "(47:8) ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let carousel;
	let current;

	carousel = new Carousel({
			props: {
				perPage: 4,
				dots: false,
				$$slots: {
					"right-control": [create_right_control_slot],
					"left-control": [create_left_control_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			main = element("main");
			create_component(carousel.$$.fragment);
			add_location(main, file, 32, 0, 855);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			mount_component(carousel, main, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const carousel_changes = {};

			if (dirty & /*$$scope, recommendations*/ 1025) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const API_URL = "https://image.tmdb.org/t/p/original/";
const delta = 6;

function instance($$self, $$props, $$invalidate) {
	let $currentCountry;
	let $goto;
	validate_store(currentCountry, 'currentCountry');
	component_subscribe($$self, currentCountry, $$value => $$invalidate(5, $currentCountry = $$value));
	validate_store(goto, 'goto');
	component_subscribe($$self, goto, $$value => $$invalidate(6, $goto = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Carousel', slots, []);
	let { recommendations } = $$props;
	let startX;
	let startY;

	function mouseDownTracker(event) {
		startX = event.pageX;
		startY = event.pageY;
	}

	function mouseUpDragOrRedirecter(event, id) {
		const diffX = Math.abs(event.pageX - startX);
		const diffY = Math.abs(event.pageY - startY);

		if (diffX < delta && diffY < delta) {
			$goto('./:cc', { cc: $currentCountry, id });
		}
	}

	const writable_props = ['recommendations'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Carousel> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('recommendations' in $$props) $$invalidate(0, recommendations = $$props.recommendations);
	};

	$$self.$capture_state = () => ({
		Icon,
		Carousel,
		mdiArrowRightBoldCircle,
		mdiArrowLeftBoldCircle,
		goto,
		url,
		currentCountry,
		API_URL,
		recommendations,
		delta,
		startX,
		startY,
		mouseDownTracker,
		mouseUpDragOrRedirecter,
		$currentCountry,
		$goto
	});

	$$self.$inject_state = $$props => {
		if ('recommendations' in $$props) $$invalidate(0, recommendations = $$props.recommendations);
		if ('startX' in $$props) startX = $$props.startX;
		if ('startY' in $$props) startY = $$props.startY;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [recommendations, mouseDownTracker, mouseUpDragOrRedirecter];
}

class Carousel_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { recommendations: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*recommendations*/ ctx[0] === undefined && !('recommendations' in props)) {
			console.warn("<Carousel> was created without expected prop 'recommendations'");
		}
	}

	get recommendations() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set recommendations(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { CardText as C, CardTitle as a, Carousel_1 as b };
//# sourceMappingURL=Carousel.js.map
