
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as append_styles, m as create_slot, b as validate_slots, e as element, g as attr_dev, D as set_style, h as add_location, j as insert_dev, l as detach_dev, f as space, o as toggle_class, k as append_dev, p as action_destroyer, x as is_function, q as update_slot_base, r as get_all_dirty_from_scope, w as get_slot_changes, y as transition_in, z as transition_out, A as create_component, B as mount_component, n as noop, C as destroy_component, Q as group_outros, R as check_outros } from './main.js';

/* eslint-disable no-param-reassign */

const themeColors = ['primary', 'secondary', 'success', 'info', 'warning', 'error'];

/**
 * @param {string} klass
 */
function formatClass(klass) {
  return klass.split(' ').map((i) => {
    if (themeColors.includes(i)) return `${i}-color`;
    return i;
  });
}

function setBackgroundColor(node, text) {
  if (/^(#|rgb|hsl|currentColor)/.test(text)) {
    // This is a CSS hex.
    node.style.backgroundColor = text;
    return false;
  }

  if (text.startsWith('--')) {
    // This is a CSS variable.
    node.style.backgroundColor = `var(${text})`;
    return false;
  }

  const klass = formatClass(text);
  node.classList.add(...klass);
  return klass;
}

/**
 * @param node {Element}
 * @param text {string|boolean}
 */
var BackgroundColor = (node, text) => {
  let klass;
  if (typeof text === 'string') {
    klass = setBackgroundColor(node, text);
  }

  return {
    update(newText) {
      if (klass) {
        node.classList.remove(...klass);
      } else {
        node.style.backgroundColor = null;
      }

      if (typeof newText === 'string') {
        klass = setBackgroundColor(node, newText);
      }
    },
  };
};

/* node_modules/svelte-materialify/dist/components/ProgressLinear/ProgressLinear.svelte generated by Svelte v3.42.1 */
const file$1 = "node_modules/svelte-materialify/dist/components/ProgressLinear/ProgressLinear.svelte";

function add_css$1(target) {
	append_styles(target, "svelte-kdlgdc", ".s-progress-linear.svelte-kdlgdc.svelte-kdlgdc{background:transparent;overflow:hidden;position:relative;transition:0.2s cubic-bezier(0.4, 0, 0.6, 1);width:100%;color:var(--theme-text-primary)}.s-progress-linear.inactive.svelte-kdlgdc.svelte-kdlgdc{height:0 !important}.s-progress-linear.rounded.svelte-kdlgdc.svelte-kdlgdc{border-radius:4px}.s-progress-linear.svelte-kdlgdc .background.svelte-kdlgdc,.s-progress-linear.svelte-kdlgdc .determinate.svelte-kdlgdc,.s-progress-linear.svelte-kdlgdc .indeterminate.svelte-kdlgdc{top:0;bottom:0;position:absolute;transition:inherit}.s-progress-linear.svelte-kdlgdc .determinate.striped.svelte-kdlgdc{background-image:linear-gradient(135deg, rgba(255, 255, 255, 0.25) 25%, transparent 0, transparent 50%, rgba(255, 255, 255, 0.25) 0, rgba(255, 255, 255, 0.25) 75%, transparent 0, transparent);background-size:40px 40px;background-repeat:repeat}.s-progress-linear.svelte-kdlgdc .indeterminate.svelte-kdlgdc{right:auto;width:auto;will-change:left,right;background-color:inherit;animation-duration:2.2s;animation-iteration-count:infinite}.s-progress-linear.svelte-kdlgdc .indeterminate.long.svelte-kdlgdc{animation-name:svelte-kdlgdc-indeterminate}.s-progress-linear.svelte-kdlgdc .indeterminate.short.svelte-kdlgdc{animation-name:svelte-kdlgdc-indeterminate-short}.s-progress-linear.svelte-kdlgdc .stream.svelte-kdlgdc{background:transparent !important;animation:svelte-kdlgdc-stream .25s linear infinite;bottom:0;opacity:.3;pointer-events:none;position:absolute;border-top:4px dotted;top:calc(50% - 2px);transition:inherit}.s-progress-linear.reversed.svelte-kdlgdc .background.svelte-kdlgdc,.s-progress-linear.reversed.svelte-kdlgdc .determinate.svelte-kdlgdc,.s-progress-linear.reversed.svelte-kdlgdc .indeterminate.svelte-kdlgdc{right:0}.s-progress-linear.reversed.svelte-kdlgdc .indeterminate.svelte-kdlgdc{animation-direction:reverse}.s-progress-linear.reversed.svelte-kdlgdc .stream.svelte-kdlgdc{right:auto;animation-direction:reverse}.s-progress-linear.svelte-kdlgdc:not(.reversed) .background.svelte-kdlgdc,.s-progress-linear.svelte-kdlgdc:not(.reversed) .determinate.svelte-kdlgdc,.s-progress-linear.svelte-kdlgdc:not(.reversed) .indeterminate.svelte-kdlgdc{left:0}.s-progress-linear.svelte-kdlgdc:not(.reversed) .stream.svelte-kdlgdc{left:auto;right:-8px}.s-progress-linear__content.svelte-kdlgdc.svelte-kdlgdc{align-items:center;display:flex;height:100%;left:0;justify-content:center;position:absolute;top:0;width:100%;z-index:2;pointer-events:none}@keyframes svelte-kdlgdc-indeterminate{0%{left:-90%;right:100%}60%{left:-90%;right:100%}to{left:100%;right:-35%}}@keyframes svelte-kdlgdc-indeterminate-short{0%{left:-200%;right:100%}60%{left:107%;right:-8%}to{left:107%;right:-8%}}@keyframes svelte-kdlgdc-stream{to{transform:translateX(-8px)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NMaW5lYXIuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQW9COEMsa0JBQUEsNEJBQUEsQ0FBQSwyckZBQTBpRSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJQcm9ncmVzc0xpbmVhci5zdmVsdGUiXX0= */");
}

// (146:2) {:else}
function create_else_block(ctx) {
	let div;
	let BackgroundColor_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "determinate svelte-kdlgdc");
			set_style(div, "width", /*value*/ ctx[1] + "%");
			toggle_class(div, "striped", /*striped*/ ctx[12]);
			add_location(div, file$1, 146, 4, 3695);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div, /*color*/ ctx[7]));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2) {
				set_style(div, "width", /*value*/ ctx[1] + "%");
			}

			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*color*/ 128) BackgroundColor_action.update.call(null, /*color*/ ctx[7]);

			if (dirty & /*striped*/ 4096) {
				toggle_class(div, "striped", /*striped*/ ctx[12]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(146:2) {:else}",
		ctx
	});

	return block;
}

// (141:2) {#if indeterminate}
function create_if_block_1(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let BackgroundColor_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			attr_dev(div0, "class", "indeterminate long svelte-kdlgdc");
			add_location(div0, file$1, 142, 6, 3593);
			attr_dev(div1, "class", "indeterminate short svelte-kdlgdc");
			add_location(div1, file$1, 143, 6, 3634);
			add_location(div2, file$1, 141, 4, 3553);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t);
			append_dev(div2, div1);

			if (!mounted) {
				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div2, /*color*/ ctx[7]));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*color*/ 128) BackgroundColor_action.update.call(null, /*color*/ ctx[7]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(141:2) {#if indeterminate}",
		ctx
	});

	return block;
}

// (158:2) {#if stream}
function create_if_block$1(ctx) {
	let div;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", div_class_value = "stream " + /*color*/ ctx[7] + " svelte-kdlgdc");
			set_style(div, "width", 100 - /*buffer*/ ctx[8] + "%");
			add_location(div, file$1, 158, 4, 3906);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*color*/ 128 && div_class_value !== (div_class_value = "stream " + /*color*/ ctx[7] + " svelte-kdlgdc")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*buffer*/ 256) {
				set_style(div, "width", 100 - /*buffer*/ ctx[8] + "%");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(158:2) {#if stream}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let div0_style_value;
	let BackgroundColor_action;
	let t0;
	let t1;
	let div1;
	let t2;
	let div2_class_value;
	let div2_style_value;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*indeterminate*/ ctx[3]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
	let if_block1 = /*stream*/ ctx[10] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			if_block0.c();
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			attr_dev(div0, "class", "background svelte-kdlgdc");
			attr_dev(div0, "style", div0_style_value = "opacity:" + /*backgroundOpacity*/ ctx[6] + ";" + (/*reversed*/ ctx[9] ? 'right' : 'left') + ":" + /*value*/ ctx[1] + "%;width:" + (/*buffer*/ ctx[8] - /*value*/ ctx[1]) + "%");
			add_location(div0, file$1, 135, 2, 3350);
			attr_dev(div1, "class", "s-progress-linear__content svelte-kdlgdc");
			add_location(div1, file$1, 153, 2, 3823);
			attr_dev(div2, "role", "progressbar");
			attr_dev(div2, "aria-valuemin", "0");
			attr_dev(div2, "aria-valuemax", "100");
			attr_dev(div2, "aria-valuenow", /*value*/ ctx[1]);
			attr_dev(div2, "class", div2_class_value = "s-progress-linear " + /*klass*/ ctx[0] + " svelte-kdlgdc");
			attr_dev(div2, "style", div2_style_value = "height:" + /*height*/ ctx[4] + ";" + /*style*/ ctx[13]);
			toggle_class(div2, "inactive", !/*active*/ ctx[2]);
			toggle_class(div2, "reversed", /*reversed*/ ctx[9]);
			toggle_class(div2, "rounded", /*rounded*/ ctx[11]);
			add_location(div2, file$1, 125, 0, 3125);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			if_block0.m(div2, null);
			append_dev(div2, t1);
			append_dev(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append_dev(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(BackgroundColor_action = BackgroundColor.call(null, div0, /*backgroundColor*/ ctx[5]));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*backgroundOpacity, reversed, value, buffer*/ 834 && div0_style_value !== (div0_style_value = "opacity:" + /*backgroundOpacity*/ ctx[6] + ";" + (/*reversed*/ ctx[9] ? 'right' : 'left') + ":" + /*value*/ ctx[1] + "%;width:" + (/*buffer*/ ctx[8] - /*value*/ ctx[1]) + "%")) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (BackgroundColor_action && is_function(BackgroundColor_action.update) && dirty & /*backgroundColor*/ 32) BackgroundColor_action.update.call(null, /*backgroundColor*/ ctx[5]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div2, t1);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
						null
					);
				}
			}

			if (/*stream*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*value*/ 2) {
				attr_dev(div2, "aria-valuenow", /*value*/ ctx[1]);
			}

			if (!current || dirty & /*klass*/ 1 && div2_class_value !== (div2_class_value = "s-progress-linear " + /*klass*/ ctx[0] + " svelte-kdlgdc")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty & /*height, style*/ 8208 && div2_style_value !== (div2_style_value = "height:" + /*height*/ ctx[4] + ";" + /*style*/ ctx[13])) {
				attr_dev(div2, "style", div2_style_value);
			}

			if (dirty & /*klass, active*/ 5) {
				toggle_class(div2, "inactive", !/*active*/ ctx[2]);
			}

			if (dirty & /*klass, reversed*/ 513) {
				toggle_class(div2, "reversed", /*reversed*/ ctx[9]);
			}

			if (dirty & /*klass, rounded*/ 2049) {
				toggle_class(div2, "rounded", /*rounded*/ ctx[11]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ProgressLinear', slots, ['default']);
	let { class: klass = '' } = $$props;
	let { value = 0 } = $$props;
	let { active = true } = $$props;
	let { indeterminate = false } = $$props;
	let { height = '4px' } = $$props;
	let { backgroundColor = 'primary' } = $$props;
	let { backgroundOpacity = 0.3 } = $$props;
	let { color = backgroundColor } = $$props;
	let { buffer = 100 } = $$props;
	let { reversed = false } = $$props;
	let { stream = false } = $$props;
	let { rounded = false } = $$props;
	let { striped = false } = $$props;
	let { style = '' } = $$props;

	const writable_props = [
		'class',
		'value',
		'active',
		'indeterminate',
		'height',
		'backgroundColor',
		'backgroundOpacity',
		'color',
		'buffer',
		'reversed',
		'stream',
		'rounded',
		'striped',
		'style'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProgressLinear> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('active' in $$props) $$invalidate(2, active = $$props.active);
		if ('indeterminate' in $$props) $$invalidate(3, indeterminate = $$props.indeterminate);
		if ('height' in $$props) $$invalidate(4, height = $$props.height);
		if ('backgroundColor' in $$props) $$invalidate(5, backgroundColor = $$props.backgroundColor);
		if ('backgroundOpacity' in $$props) $$invalidate(6, backgroundOpacity = $$props.backgroundOpacity);
		if ('color' in $$props) $$invalidate(7, color = $$props.color);
		if ('buffer' in $$props) $$invalidate(8, buffer = $$props.buffer);
		if ('reversed' in $$props) $$invalidate(9, reversed = $$props.reversed);
		if ('stream' in $$props) $$invalidate(10, stream = $$props.stream);
		if ('rounded' in $$props) $$invalidate(11, rounded = $$props.rounded);
		if ('striped' in $$props) $$invalidate(12, striped = $$props.striped);
		if ('style' in $$props) $$invalidate(13, style = $$props.style);
		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		BackgroundColor,
		klass,
		value,
		active,
		indeterminate,
		height,
		backgroundColor,
		backgroundOpacity,
		color,
		buffer,
		reversed,
		stream,
		rounded,
		striped,
		style
	});

	$$self.$inject_state = $$props => {
		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('active' in $$props) $$invalidate(2, active = $$props.active);
		if ('indeterminate' in $$props) $$invalidate(3, indeterminate = $$props.indeterminate);
		if ('height' in $$props) $$invalidate(4, height = $$props.height);
		if ('backgroundColor' in $$props) $$invalidate(5, backgroundColor = $$props.backgroundColor);
		if ('backgroundOpacity' in $$props) $$invalidate(6, backgroundOpacity = $$props.backgroundOpacity);
		if ('color' in $$props) $$invalidate(7, color = $$props.color);
		if ('buffer' in $$props) $$invalidate(8, buffer = $$props.buffer);
		if ('reversed' in $$props) $$invalidate(9, reversed = $$props.reversed);
		if ('stream' in $$props) $$invalidate(10, stream = $$props.stream);
		if ('rounded' in $$props) $$invalidate(11, rounded = $$props.rounded);
		if ('striped' in $$props) $$invalidate(12, striped = $$props.striped);
		if ('style' in $$props) $$invalidate(13, style = $$props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		klass,
		value,
		active,
		indeterminate,
		height,
		backgroundColor,
		backgroundOpacity,
		color,
		buffer,
		reversed,
		stream,
		rounded,
		striped,
		style,
		$$scope,
		slots
	];
}

class ProgressLinear extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				class: 0,
				value: 1,
				active: 2,
				indeterminate: 3,
				height: 4,
				backgroundColor: 5,
				backgroundOpacity: 6,
				color: 7,
				buffer: 8,
				reversed: 9,
				stream: 10,
				rounded: 11,
				striped: 12,
				style: 13
			},
			add_css$1
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ProgressLinear",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get indeterminate() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set indeterminate(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backgroundColor() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backgroundColor(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backgroundOpacity() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backgroundOpacity(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buffer() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buffer(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get reversed() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set reversed(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get stream() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stream(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rounded() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rounded(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get striped() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set striped(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<ProgressLinear>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<ProgressLinear>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-materialify/dist/components/Card/Card.svelte generated by Svelte v3.42.1 */
const file = "node_modules/svelte-materialify/dist/components/Card/Card.svelte";

function add_css(target) {
	append_styles(target, "svelte-5jj5zs", ".s-card{background-color:var(--theme-cards);color:var(--theme-text-primary);display:block;max-width:100%;outline:none;text-decoration:none;transition-property:box-shadow,opacity;overflow-wrap:break-word;position:relative;white-space:normal}.s-card:not(.flat){box-shadow:0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)}.s-card:not(.tile){border-radius:4px}.s-card.outlined{border:thin solid rgba(0, 0, 0, 0.12);box-shadow:0 0 0 0 rgba(0, 0, 0, 0.2), 0 0 0 0 rgba(0, 0, 0, 0.14), 0 0 0 0 rgba(0, 0, 0, 0.12)}.s-card.raised{box-shadow:0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12)}.s-card.shaped{border-radius:24px 4px}.s-card.hover{cursor:pointer;transition:box-shadow 0.4s cubic-bezier(0.25, 0.8, 0.25, 1)}.s-card.hover:focus,.s-card.hover:hover{box-shadow:0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12)}.s-card.link,.s-card.link .s-chip{cursor:pointer}.s-card.link:before{background:currentColor;bottom:0;content:\"\";left:0;opacity:0;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .2s}.s-card.link:focus:before{opacity:.08}.s-card.disabled{pointer-events:none;user-select:none}.s-card.disabled>:not(.s-progress-linear){opacity:.6;transition:inherit}.s-card>:first-child:not(.s-btn):not(.s-chip),.s-card>[slot=progress]+:not(.s-btn):not(.s-chip){border-top-left-radius:inherit;border-top-right-radius:inherit}.s-card>:last-child:not(.s-btn):not(.s-chip){border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBaUIyQyxPQUFBLEFBQUEsQ0FBQSx3a0RBQXN1RCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDYXJkLnN2ZWx0ZSJdfQ== */");
}

const get_progress_slot_changes = dirty => ({});
const get_progress_slot_context = ctx => ({});

// (98:2) {#if loading}
function create_if_block(ctx) {
	let current;
	const progress_slot_template = /*#slots*/ ctx[12].progress;
	const progress_slot = create_slot(progress_slot_template, ctx, /*$$scope*/ ctx[11], get_progress_slot_context);
	const progress_slot_or_fallback = progress_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			if (progress_slot_or_fallback) progress_slot_or_fallback.c();
		},
		m: function mount(target, anchor) {
			if (progress_slot_or_fallback) {
				progress_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (progress_slot) {
				if (progress_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						progress_slot,
						progress_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(progress_slot_template, /*$$scope*/ ctx[11], dirty, get_progress_slot_changes),
						get_progress_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (progress_slot_or_fallback) progress_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(98:2) {#if loading}",
		ctx
	});

	return block;
}

// (99:26)        
function fallback_block(ctx) {
	let progresslinear;
	let current;

	progresslinear = new ProgressLinear({
			props: { indeterminate: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progresslinear.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(progresslinear, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progresslinear.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progresslinear.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progresslinear, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(99:26)        ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t;
	let div_class_value;
	let current;
	let if_block = /*loading*/ ctx[8] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			attr_dev(div, "class", div_class_value = "s-card " + /*klass*/ ctx[0]);
			attr_dev(div, "style", /*style*/ ctx[10]);
			toggle_class(div, "flat", /*flat*/ ctx[1]);
			toggle_class(div, "tile", /*tile*/ ctx[2]);
			toggle_class(div, "outlined", /*outlined*/ ctx[3]);
			toggle_class(div, "raised", /*raised*/ ctx[4]);
			toggle_class(div, "shaped", /*shaped*/ ctx[5]);
			toggle_class(div, "hover", /*hover*/ ctx[6]);
			toggle_class(div, "link", /*link*/ ctx[7]);
			toggle_class(div, "disabled", /*disabled*/ ctx[9]);
			add_location(div, file, 86, 0, 2532);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*loading*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*loading*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*klass*/ 1 && div_class_value !== (div_class_value = "s-card " + /*klass*/ ctx[0])) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*style*/ 1024) {
				attr_dev(div, "style", /*style*/ ctx[10]);
			}

			if (dirty & /*klass, flat*/ 3) {
				toggle_class(div, "flat", /*flat*/ ctx[1]);
			}

			if (dirty & /*klass, tile*/ 5) {
				toggle_class(div, "tile", /*tile*/ ctx[2]);
			}

			if (dirty & /*klass, outlined*/ 9) {
				toggle_class(div, "outlined", /*outlined*/ ctx[3]);
			}

			if (dirty & /*klass, raised*/ 17) {
				toggle_class(div, "raised", /*raised*/ ctx[4]);
			}

			if (dirty & /*klass, shaped*/ 33) {
				toggle_class(div, "shaped", /*shaped*/ ctx[5]);
			}

			if (dirty & /*klass, hover*/ 65) {
				toggle_class(div, "hover", /*hover*/ ctx[6]);
			}

			if (dirty & /*klass, link*/ 129) {
				toggle_class(div, "link", /*link*/ ctx[7]);
			}

			if (dirty & /*klass, disabled*/ 513) {
				toggle_class(div, "disabled", /*disabled*/ ctx[9]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Card', slots, ['progress','default']);
	let { class: klass = '' } = $$props;
	let { flat = false } = $$props;
	let { tile = false } = $$props;
	let { outlined = false } = $$props;
	let { raised = false } = $$props;
	let { shaped = false } = $$props;
	let { hover = false } = $$props;
	let { link = false } = $$props;
	let { loading = false } = $$props;
	let { disabled = false } = $$props;
	let { style = null } = $$props;

	const writable_props = [
		'class',
		'flat',
		'tile',
		'outlined',
		'raised',
		'shaped',
		'hover',
		'link',
		'loading',
		'disabled',
		'style'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('class' in $$props) $$invalidate(0, klass = $$props.class);
		if ('flat' in $$props) $$invalidate(1, flat = $$props.flat);
		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
		if ('outlined' in $$props) $$invalidate(3, outlined = $$props.outlined);
		if ('raised' in $$props) $$invalidate(4, raised = $$props.raised);
		if ('shaped' in $$props) $$invalidate(5, shaped = $$props.shaped);
		if ('hover' in $$props) $$invalidate(6, hover = $$props.hover);
		if ('link' in $$props) $$invalidate(7, link = $$props.link);
		if ('loading' in $$props) $$invalidate(8, loading = $$props.loading);
		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ('style' in $$props) $$invalidate(10, style = $$props.style);
		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		ProgressLinear,
		klass,
		flat,
		tile,
		outlined,
		raised,
		shaped,
		hover,
		link,
		loading,
		disabled,
		style
	});

	$$self.$inject_state = $$props => {
		if ('klass' in $$props) $$invalidate(0, klass = $$props.klass);
		if ('flat' in $$props) $$invalidate(1, flat = $$props.flat);
		if ('tile' in $$props) $$invalidate(2, tile = $$props.tile);
		if ('outlined' in $$props) $$invalidate(3, outlined = $$props.outlined);
		if ('raised' in $$props) $$invalidate(4, raised = $$props.raised);
		if ('shaped' in $$props) $$invalidate(5, shaped = $$props.shaped);
		if ('hover' in $$props) $$invalidate(6, hover = $$props.hover);
		if ('link' in $$props) $$invalidate(7, link = $$props.link);
		if ('loading' in $$props) $$invalidate(8, loading = $$props.loading);
		if ('disabled' in $$props) $$invalidate(9, disabled = $$props.disabled);
		if ('style' in $$props) $$invalidate(10, style = $$props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		klass,
		flat,
		tile,
		outlined,
		raised,
		shaped,
		hover,
		link,
		loading,
		disabled,
		style,
		$$scope,
		slots
	];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 0,
				flat: 1,
				tile: 2,
				outlined: 3,
				raised: 4,
				shaped: 5,
				hover: 6,
				link: 7,
				loading: 8,
				disabled: 9,
				style: 10
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flat() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flat(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tile() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tile(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outlined() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outlined(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get raised() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set raised(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shaped() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shaped(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hover() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hover(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get link() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set link(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Card as C };
//# sourceMappingURL=Card.js.map
