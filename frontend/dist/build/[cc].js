
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as append_styles, v as validate_store, c as component_subscribe, b as validate_slots, u as url, am as params, U as goto, T as currentCountry, ak as handle_promise, A as create_component, B as mount_component, y as transition_in, z as transition_out, C as destroy_component, f as space, ad as empty, j as insert_dev, al as update_await_block_branch, l as detach_dev, W as validate_each_argument, e as element, g as attr_dev, E as src_url_equal, h as add_location, n as noop, t as text, D as set_style, k as append_dev, Z as destroy_each } from './main.js';
import { M as MaterialApp, I as Icon, m as mdiRefresh, H as Header } from './Header.js';
import { C as Card } from './Card.js';
import { C as CardText, a as CardTitle, b as Carousel_1 } from './Carousel.js';

/* src/pages/movie/[cc].svelte generated by Svelte v3.42.1 */
const file = "src/pages/movie/[cc].svelte";

function add_css(target) {
	append_styles(target, "svelte-jf6nub", "img.backdrop-img.svelte-jf6nub{padding-top:3em;filter:blur(4px);background-repeat:no-repeat;width:80%;position:absolute;left:10%;max-height:84%}div.container.svelte-jf6nub{padding-top:3em;display:block;width:50vw;margin:auto}.poster-stack.svelte-jf6nub{display:flex;flex-wrap:wrap;position:relative}.card.svelte-jf6nub{padding-top:1vw;display:flex;position:relative;z-index:3}.card-info.svelte-jf6nub{margin-left:1vw;padding-left:1.5vw;display:block;justify-content:space-between;z-index:1}.provider-logo.svelte-jf6nub{border-radius:15% 8% 15% 8%;width:4em;z-index:1;box-shadow:0 0 3px black}.providers.svelte-jf6nub{display:flex;flex-direction:row;gap:0.35vw;min-width:40px;position:relative;z-index:3;padding-top:1em}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW2NjXS5zdmVsdGUiLCJtYXBwaW5ncyI6IitzQkFtSUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiW2NjXS5zdmVsdGUiXX0= */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (1:0) <script>     import {url, params, goto}
function create_catch_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <script>     import {url, params, goto}",
		ctx
	});

	return block;
}

// (33:4) {:then movie}
function create_then_block(ctx) {
	let img0;
	let img0_src_value;
	let t0;
	let div6;
	let div4;
	let div2;
	let img1;
	let img1_src_value;
	let t1;
	let div1;
	let div0;
	let card;
	let t2;
	let div3;
	let t3;
	let div5;
	let t4;
	let h4;
	let t6;
	let carousel;
	let current;

	card = new Card({
			props: {
				outlined: true,
				shaped: true,
				style: "background: black; opacity: 75%;",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = /*movie*/ ctx[6].providers;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	carousel = new Carousel_1({
			props: {
				recommendations: /*movie*/ ctx[6].recommendations
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			img0 = element("img");
			t0 = space();
			div6 = element("div");
			div4 = element("div");
			div2 = element("div");
			img1 = element("img");
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			create_component(card.$$.fragment);
			t2 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div5 = element("div");
			t4 = text(" \n                ");
			h4 = element("h4");
			h4.textContent = "Recommendations";
			t6 = text("\n                 \n                ");
			create_component(carousel.$$.fragment);
			attr_dev(img0, "class", "backdrop-img svelte-jf6nub");
			if (!src_url_equal(img0.src, img0_src_value = "" + (API_URL + /*movie*/ ctx[6].backdrop_path))) attr_dev(img0, "src", img0_src_value);
			add_location(img0, file, 33, 8, 1067);
			if (!src_url_equal(img1.src, img1_src_value = "" + (API_URL + /*movie*/ ctx[6].poster_path))) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "background");
			set_style(img1, "max-width", "50%");
			set_style(img1, "position", "relative");
			set_style(img1, "border-radius", "5% 2% 5% 2%");
			set_style(img1, "box-shadow", "0 0 3px black");
			add_location(img1, file, 37, 20, 1258);
			attr_dev(div0, "class", "d-flex justify-center mt-4 mb-4");
			add_location(div0, file, 41, 24, 1540);
			attr_dev(div1, "class", "card-info svelte-jf6nub");
			add_location(div1, file, 40, 20, 1492);
			attr_dev(div2, "class", "card svelte-jf6nub");
			add_location(div2, file, 36, 16, 1219);
			attr_dev(div3, "class", "providers svelte-jf6nub");
			add_location(div3, file, 58, 16, 2427);
			attr_dev(div4, "class", "poster-stack svelte-jf6nub");
			add_location(div4, file, 35, 12, 1176);
			add_location(h4, file, 67, 16, 2782);
			set_style(div5, "padding-top", "3vh");
			set_style(div5, "padding-bottom", "8vh");
			add_location(div5, file, 65, 12, 2691);
			attr_dev(div6, "class", "container svelte-jf6nub");
			add_location(div6, file, 34, 8, 1140);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div4);
			append_dev(div4, div2);
			append_dev(div2, img1);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, div0);
			mount_component(card, div0, null);
			append_dev(div4, t2);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append_dev(div6, t3);
			append_dev(div6, div5);
			append_dev(div5, t4);
			append_dev(div5, h4);
			append_dev(div5, t6);
			mount_component(carousel, div5, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);

			if (dirty & /*API_URL, fetchMovieDetails*/ 1) {
				each_value = /*movie*/ ctx[6].providers;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div6);
			destroy_component(card);
			destroy_each(each_blocks, detaching);
			destroy_component(carousel);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(33:4) {:then movie}",
		ctx
	});

	return block;
}

// (44:32) <CardTitle style="color: white">
function create_default_slot_3(ctx) {
	let h5;
	let t_value = /*movie*/ ctx[6].title + "";
	let t;

	const block = {
		c: function create() {
			h5 = element("h5");
			t = text(t_value);
			add_location(h5, file, 44, 36, 1779);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			append_dev(h5, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(44:32) <CardTitle style=\\\"color: white\\\">",
		ctx
	});

	return block;
}

// (47:32) <CardText style="color: white;">
function create_default_slot_2(ctx) {
	let h6;
	let t0_value = /*movie*/ ctx[6].release_date + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*movie*/ ctx[6].overview + "";
	let t2;

	const block = {
		c: function create() {
			h6 = element("h6");
			t0 = text(t0_value);
			t1 = text("\n                                     \n                                    \n                                    ");
			p = element("p");
			t2 = text(t2_value);
			add_location(h6, file, 47, 36, 1948);
			add_location(p, file, 52, 36, 2226);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h6, anchor);
			append_dev(h6, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h6);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(47:32) <CardText style=\\\"color: white;\\\">",
		ctx
	});

	return block;
}

// (43:28) <Card outlined shaped style="background: black; opacity: 75%;">
function create_default_slot_1(ctx) {
	let cardtitle;
	let t;
	let cardtext;
	let current;

	cardtitle = new CardTitle({
			props: {
				style: "color: white",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	cardtext = new CardText({
			props: {
				style: "color: white;",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardtitle.$$.fragment);
			t = space();
			create_component(cardtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(cardtitle, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(cardtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardtitle_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				cardtitle_changes.$$scope = { dirty, ctx };
			}

			cardtitle.$set(cardtitle_changes);
			const cardtext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				cardtext_changes.$$scope = { dirty, ctx };
			}

			cardtext.$set(cardtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardtitle.$$.fragment, local);
			transition_in(cardtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardtitle.$$.fragment, local);
			transition_out(cardtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardtitle, detaching);
			if (detaching) detach_dev(t);
			destroy_component(cardtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(43:28) <Card outlined shaped style=\\\"background: black; opacity: 75%;\\\">",
		ctx
	});

	return block;
}

// (60:20) {#each movie.providers as provider}
function create_each_block(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "provider-logo svelte-jf6nub");
			if (!src_url_equal(img.src, img_src_value = "" + (API_URL + /*provider*/ ctx[7].logo_path))) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "cover");
			add_location(img, file, 60, 24, 2531);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(60:20) {#each movie.providers as provider}",
		ctx
	});

	return block;
}

// (31:32)          <Icon spin path={mdiRefresh}
function create_pending_block(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { spin: true, path: mdiRefresh },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(31:32)          <Icon spin path={mdiRefresh}",
		ctx
	});

	return block;
}

// (29:0) <MaterialApp>
function create_default_slot(ctx) {
	let header;
	let t;
	let await_block_anchor;
	let current;
	header = new Header({ $$inline: true });

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 6,
		blocks: [,,,]
	};

	handle_promise(/*fetchMovieDetails*/ ctx[0](), info);

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();
			await_block_anchor = empty();
			info.block.c();
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			update_await_block_branch(info, ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);

			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(29:0) <MaterialApp>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let materialapp;
	let current;

	materialapp = new MaterialApp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(materialapp.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(materialapp, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const materialapp_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				materialapp_changes.$$scope = { dirty, ctx };
			}

			materialapp.$set(materialapp_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(materialapp.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(materialapp.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(materialapp, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const API_URL = "https://image.tmdb.org/t/p/original/";

function instance($$self, $$props, $$invalidate) {
	let $params;
	let $currentCountry;
	let $url;
	validate_store(params, 'params');
	component_subscribe($$self, params, $$value => $$invalidate(2, $params = $$value));
	validate_store(currentCountry, 'currentCountry');
	component_subscribe($$self, currentCountry, $$value => $$invalidate(3, $currentCountry = $$value));
	validate_store(url, 'url');
	component_subscribe($$self, url, $$value => $$invalidate(4, $url = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bccu5D', slots, []);
	const movie_detail_url = `http://localhost:1337/movie/${$params.cc}/${$params.id}`;

	const fetchMovieDetails = async () => {
		const response = await fetch(movie_detail_url);
		return await response.json();
	};

	let firstLoadCompleted = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bccu5D> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		url,
		params,
		goto,
		MaterialApp,
		Icon,
		Card,
		CardText,
		CardTitle,
		mdiRefresh,
		Header,
		Carousel: Carousel_1,
		currentCountry,
		movie_detail_url,
		fetchMovieDetails,
		API_URL,
		firstLoadCompleted,
		$params,
		$currentCountry,
		$url
	});

	$$self.$inject_state = $$props => {
		if ('firstLoadCompleted' in $$props) $$invalidate(1, firstLoadCompleted = $$props.firstLoadCompleted);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$currentCountry, firstLoadCompleted, $url, $params*/ 30) {
			// If the variable changes
			if ($currentCountry) {
				if (firstLoadCompleted === true) {
					window.location.href = $url('./:cc', { cc: $currentCountry, id: $params.id });
				}

				$$invalidate(1, firstLoadCompleted = true);
			}
		}
	};

	return [fetchMovieDetails, firstLoadCompleted, $params, $currentCountry, $url];
}

class U5Bccu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bccu5D",
			options,
			id: create_fragment.name
		});
	}
}

export { U5Bccu5D as default };
//# sourceMappingURL=[cc].js.map
